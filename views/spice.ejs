<!--'ws://81.205.168.8:3535/api/v1/instances/<%=server%>/console/vga
 <!--
   Copyright (C) 2012 by Jeremy P. White <jwhite@codeweavers.com>

   This file is part of spice-html5.

   spice-html5 is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   spice-html5 is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with spice-html5.  If not, see <http://www.gnu.org/licenses/>.

   --------------------------------------------------
    Spice Javascript client template.
    Refer to main.js for more detailed information
   --------------------------------------------------

-->

<!doctype html>
<html>

<head>

    <title>Spice Javascript client</title>
    <link rel="stylesheet" type="text/css" href="/spice.css" />

    <!-- ES2015/ES6 modules polyfill -->
    <script type="module">
        window._spice_has_module_support = true;
    </script>
    <script>
        window.addEventListener("load", function () {
            if (window._spice_has_module_support) return;
            var loader = document.createElement("script");
            loader.src = "thirdparty/browser-es-module-loader/dist/" +
                "browser-es-module-loader.js";
            document.head.appendChild(loader);
        });
    </script>

    <script type="module" crossorigin="anonymous">
        import * as SpiceHtml5 from '/spiceHtml5/src/main.js';
        var host = null, port = null;
        var sc;

        function spice_set_cookie(name, value, days) {
            var date, expires;
            date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toGMTString();
            document.cookie = name + "=" + value + expires + "; path=/";
        };

        function spice_query_var(name, defvalue) {
            var match = RegExp('[?&]' + name + '=([^&]*)')
                .exec(window.location.search);
            return match ?
                decodeURIComponent(match[1].replace(/\+/g, ' '))
                : defvalue;
        }

        function spice_error(e) {
            disconnect();
            if (e !== undefined && e.message === "Permission denied.") {
                var pass = prompt("Password");
                connect(pass);
            }
        }
        document.connectCount = 0
        function connectToTerminal(uri, hostId, project, instance, password = undefined) {

            try {
                console.log('connect')
                sc = new SpiceHtml5.SpiceMainConn({ uri: '<%=address%>/api/v1/instances/<%=server%>/console/vga', screen_id: "spice-screen", password: '', onerror: spice_error, onagent: agent_connected });
            }
            catch (e) {
                alert(e.toString());
                disconnect();
            }
            window.addEventListener('spice-port-data', function (event) {
                // Here we convert data to text, but really we can obtain binary data also
                var msg_text = arraybuffer_to_str(new Uint8Array(event.detail.data));
                DEBUG > 0 && console.log('SPICE port', event.detail.channel.portName, 'message text:', msg_text);
            });
            window.addEventListener('spice-port-event', function (event) {
                DEBUG > 0 && console.log('SPICE port', event.detail.channel.portName, 'event data:', event.detail.spiceEvent);
            });
        }

        function disconnect() {
            if (sc) {
                sc.stop();
            }
            if (window.File && window.FileReader && window.FileList && window.Blob) {
                var spice_xfer_area = document.getElementById('spice-xfer-area');
                if (spice_xfer_area != null) {
                    document.getElementById('spice-area').removeChild(spice_xfer_area);
                }
                document.getElementById('spice-area').removeEventListener('dragover', SpiceHtml5.handle_file_dragover, false);
                document.getElementById('spice-area').removeEventListener('drop', SpiceHtml5.handle_file_drop, false);
            }
        }

        function agent_connected(sc) {
            window.addEventListener('resize', SpiceHtml5.handle_resize);
            window.spice_connection = this;

            SpiceHtml5.resize_helper(this);

            if (window.File && window.FileReader && window.FileList && window.Blob) {
                var spice_xfer_area = document.createElement("div");
                spice_xfer_area.setAttribute('id', 'spice-xfer-area');
                document.getElementById('spice-area').appendChild(spice_xfer_area);
                document.getElementById('spice-area').addEventListener('dragover', SpiceHtml5.handle_file_dragover, false);
                document.getElementById('spice-area').addEventListener('drop', SpiceHtml5.handle_file_drop, false);
            }
            else {
                console.log("File API is not supported");
            }

        }

        window.disconnectFromTerminal = disconnect
        window.connectToTerminal = connectToTerminal
        document.s = () => {
            let dropArea = document.getElementById('pro')


            dropArea.addEventListener('dragover', SpiceHtml5.handle_file_dragover, false)
            dropArea.addEventListener('drop', SpiceHtml5.handle_file_drop, false)
        }
        connectToTerminal()
    </script>

</head>

<body>

    <div id="spice-area">
        <div id="spice-screen" class="spice-screen" style="height: 100%;"></div>
    </div>

    <script>
        function show_debug_Logs() {
            var content = document.getElementById('message-div')
            if (content.style.display === 'block') {
                content.style.display = 'none';
            } else {
                content.style.display = 'block';
            }
        }

        function display_hostname() {
            var title = new URLSearchParams(window.location.search);
            name = title.getAll('title');
            name = name.split('(')[0];
            document.getElementById('hostname').innerHTML = (name);
        }

        function open_nav() {
            connectToTerminal()
            document.getElementById('Sidenav').className = 'SidenavOpen';
        }

        function close_nav() {
            document.getElementById('Sidenav').className = 'SidenavClosed';
        }

        document.getElementById('debugLogs').addEventListener('click', function () { show_debug_Logs(); });
        display_hostname()
    </script>
</body>

</html>